-- Programs --------------------------------------------------------------
-- Program as a set of declarations. This is Haskell-based. "2+2" is not a valid program, while "x=2+2" is.
entrypoints Program;
P.                          Program ::= [ Decl ] ;

-- Definition
-- Everything is a function - variables are 0-argument functions.
FunD.                       Decl ::= Ident [Ident] "=" Exp;
separator Ident "";
separator Decl ";";

-- Literals
IntL.                       Literal ::= Integer;
TL.                         Literal ::= "True";
FL.                         Literal ::= "False";

-- Operators
AddO.                       AddOp ::= "+" ;
SubO.                       AddOp ::= "-" ;
MulO.                       MulOp ::= "*" ;
DivO.                       MulOp ::= "/" ;
LtO.                        RelOp ::= "<" ;
LeO.                        RelOp ::= "<=" ;
GtO.                        RelOp ::= ">" ;
GeO.                        RelOp ::= ">=" ;
EqO.                        RelOp ::= "==" ;
NeO.                        RelOp ::= "!=" ;

-- Expression
PME.                        Exp ::=  "match" Exp "{" [PMPattern] "}" ;
-- The "let" keyword is used only during inner declarations.
LetE.                       Exp ::= "let" "{" [Decl] "}" "in" Exp ;
IfE.                        Exp ::= "if" Exp "then" Exp3 "else" Exp ;
LmE.                        Exp ::= "\\" [Ident] "->" Exp ;

OrE.                        Exp ::= Exp1 "||" Exp ;
AndE.                       Exp1 ::= Exp2 "&&" Exp1 ;
RelE.                       Exp2 ::= Exp2 RelOp Exp3 ;
AddE.                       Exp3 ::= Exp3 AddOp Exp4 ;
MulE.                       Exp4 ::= Exp4 MulOp Exp5 ;
ConE.                       Exp5 ::= Exp6 ":" Exp5 ;
NegE.                       Exp6 ::= "-" Exp7 ;
NotE.                       Exp6 ::= "!" Exp7 ;
AppE.                       Exp7 ::= Exp7 Exp8 ;
LstE.                       Exp8 ::= "[" [Exp] "]" ;
LitE.                       Exp8 ::= Literal ;
VarE.                       Exp8 ::= Ident ;

coercions Exp 8;
separator Exp ",";

-- Patterns
PMCaseP.                     PMPattern ::=  Pattern "->" Exp;
separator PMPattern ",";

LstP.                       Pattern1 ::= Pattern2 ":" Pattern1 ;
LstIcngP.                   Pattern1 ::= "[" [Pattern] "]" ;

LitP.                       Pattern2 ::= Literal;
VarP.                       Pattern2 ::= Ident ;
AnyP.                       Pattern2 ::= "_" ;

coercions Pattern 2;
separator Pattern ",";


-- Comments
comment    "#";
comment    "###" "###";
