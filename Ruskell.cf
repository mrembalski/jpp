-- Programs --------------------------------------------------------------
-- Program as a set of declarations. This is Haskell-based. "2+2" is not a valid program, while "x=2+2" is.
entrypoints Program;
Prog.                       Program ::= [ Decl ] ;

-- Definition
-- Everything is a function - variables are 0-argument functions.
Fun.                        Decl ::= Ident [Ident] "=" Exp;
separator Ident "";
separator Decl ";";

-- Literals
Int.                        Literal ::= Integer;
True.                       Literal ::= "True";
False.                      Literal ::= "False";

-- Operators
Plus.                       AddOp ::= "+" ;
Minus.                      AddOp ::= "-" ;
Times.                      MulOp ::= "*" ;
Div.                        MulOp ::= "/" ;
Lt.                         RelOp ::= "<" ;
Le.                         RelOp ::= "<=" ;
Gt.                         RelOp ::= ">" ;
Ge.                         RelOp ::= ">=" ;
Eq.                         RelOp ::= "==" ;
Neq.                        RelOp ::= "!=" ;

-- Expression
PMExp .                     Exp ::=  "match" Exp "{" [PMPattern] "}" ;
-- The "let" keyword is used only during inner declarations.
Let.                        Exp ::= "let" "{" [Decl] "}" "in" Exp ;
If.                         Exp ::= "if" Exp "then" Exp3 "else" Exp ;
Lambda.                     Exp ::= "\\" [Ident] "->" Exp ;

EOr.                        Exp ::= Exp1 "||" Exp ;
EAnd.                       Exp1 ::= Exp2 "&&" Exp1 ;
ERel.                       Exp2 ::= Exp2 RelOp Exp3 ;
EAdd.                       Exp3 ::= Exp3 AddOp Exp4 ;
EMul.                       Exp4 ::= Exp4 MulOp Exp5 ;
EConcat.                    Exp5 ::= Exp6 ":" Exp5 ;
Neg.                        Exp6 ::= "-" Exp7 ;
Not.                        Exp6 ::= "!" Exp7 ;
EApp.                       Exp7 ::= Exp7 Exp8 ;
EListExp.                   Exp8 ::= "[" [Exp] "]" ;
ELit.                       Exp8 ::= Literal ;
EVar.                       Exp8 ::= Ident ;

coercions Exp 8;
separator Exp ",";

-- Patterns
PMCase.                     PMPattern ::=  Pattern "->" Exp;
separator PMPattern ",";

ListPat.                    Pattern1 ::= Pattern2 ":" Pattern1 ;
ListIcingPat.               Pattern1 ::= "[" [Pattern] "]" ;

Lit.                        Pattern2 ::= Literal;
Var.                        Pattern2 ::= Ident ;
Any.                        Pattern2 ::= "_" ;

coercions Pattern 2;
separator Pattern ",";


-- Comments
comment    "#";
comment    "###" "###";
